### **Level 2 Cache in JPA**

**Level 2 Cache** in JPA is an optional, **external** cache that spans **multiple sessions** (across different **EntityManager** instances). It is primarily used to improve performance by reducing database access for frequently accessed data across different transactions. Unlike **Level 1 Cache** (which is tied to a single transaction and `EntityManager`), **Level 2 Cache** can persist beyond a single transaction and is shared across different sessions.

### **Key Features of Level 2 Cache**

- **Shared Across Sessions**: Level 2 cache is shared across multiple **EntityManager** instances, meaning it can be used for caching data across different transactions.
- **External to Persistence Context**: It is an external cache managed by the **JPA provider** (e.g., Hibernate), not by the **EntityManager**.
- **Persistence Across Transactions**: It persists across transactions, so entities loaded once into the cache will not require a database hit in future transactions until they expire or are evicted.
- **Expiration & Eviction**: Cached data can have an expiration time or eviction policy depending on the configuration. This helps to control memory usage and ensure that stale data is removed from the cache.

### **Types of Level 2 Cache in JPA**

Level 2 Cache in JPA can be divided into two main types:

1. **Entity Cache**: Stores entities in the cache.
2. **Collection Cache**: Stores collections or relationships (like lists, sets) in the cache.

Most commonly, **Entity Cache** is used to store entities, while **Collection Cache** is used for caching related entities (e.g., lists or sets of associated entities).

### **How Level 2 Cache is Used**

1. **Enabling Level 2 Cache**:
   Level 2 cache is **optional** in JPA, so you need to explicitly configure it in your JPA provider (e.g., Hibernate).

   In **Hibernate**, enabling the L2 cache typically involves:

   - **Adding Cache Provider**: Choose a cache provider such as **EhCache**, **Infinispan**, **Redis**, or **Hazelcast**.
   - **Configuring Cache Provider**: Define cache settings and configuration for the cache provider in the `persistence.xml` or application configuration.

   For example, with **EhCache**:

   ```xml
   <!-- persistence.xml -->
   <persistence-unit name="myPU">
       <properties>
           <!-- Enable L2 Cache -->
           <property name="hibernate.cache.use_second_level_cache" value="true"/>
           <property name="hibernate.cache.region.factory_class" value="org.hibernate.cache.ehcache.EhCacheRegionFactory"/>
           <property name="hibernate.cache.use_query_cache" value="true"/>
           <property name="hibernate.cache.ehcache.mehod.expires" value="true"/>
           <!-- Configure Cache provider (EhCache example) -->
           <property name="hibernate.cache.ehcache.cfg" value="classpath:ehcache.xml"/>
       </properties>
   </persistence-unit>
   ```

2. **Basic Cache Configuration**: 
   In this configuration, you define cache settings for **entities** and **queries**. These settings include defining cache expiration, eviction strategies, and how long data remains in the cache.

3. **Caching Entities**: 
   After enabling Level 2 cache, you can **annotate** your entities with `@Cache` annotations in Hibernate, and define cache settings such as eviction policies, time-to-live (TTL), and more.

   ```java
   @Entity
   @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
   public class Employee {
       @Id
       @GeneratedValue(strategy = GenerationType.IDENTITY)
       private Long id;
       private String name;
       private String department;
       // getters and setters
   }
   ```

   - **`@Cache` annotation** is used to define caching strategy for the entity.
   - The **`usage`** attribute specifies the concurrency strategy for cache access.

---

### **Concurrency Strategies for Level 2 Cache**

Concurrency strategies determine how the cache will handle concurrent access to cached data. The different concurrency strategies define how entities in the cache will behave in multi-user, multi-threaded environments.

Here are the main **concurrency strategies** supported by JPA providers (specifically Hibernate):

#### 1. **READ_ONLY**
   - **Description**: This strategy is used when the entity is **not updated** once it is loaded into the cache. The cache only supports read access, and no modification of cached data is allowed.
   - **Use Case**: Suitable for **immutable** data that does not change over time.
   - **Example**: A lookup table or reference data that is loaded once and does not change.
   
   ```java
   @Entity
   @Cache(usage = CacheConcurrencyStrategy.READ_ONLY)
   public class Department {
       @Id
       @GeneratedValue(strategy = GenerationType.IDENTITY)
       private Long id;
       private String name;
       // getters and setters
   }
   ```

#### 2. **READ_WRITE**
   - **Description**: This strategy is used when the entity is **frequently read and updated**. Both read and write access is allowed, and the cache will manage data consistency between the cache and the database.
   - **Use Case**: Suitable for **mutable** data that may be updated frequently in a multi-user environment.
   - **Example**: A product inventory or employee records where data is updated and read.
   
   ```java
   @Entity
   @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
   public class Product {
       @Id
       @GeneratedValue(strategy = GenerationType.IDENTITY)
       private Long id;
       private String name;
       private Double price;
       // getters and setters
   }
   ```

#### 3. **NONSTRICT_READ_WRITE**
   - **Description**: This strategy allows both read and write access, but does not guarantee consistency between the cache and database in all scenarios. It can **evict** cached data asynchronously.
   - **Use Case**: Suitable for applications that can tolerate **slightly stale data** but need better scalability.
   - **Example**: A caching mechanism for **high-throughput applications** where occasional staleness is acceptable.
   
   ```java
   @Entity
   @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
   public class Order {
       @Id
       @GeneratedValue(strategy = GenerationType.IDENTITY)
       private Long id;
       private String orderNumber;
       // getters and setters
   }
   ```

#### 4. **TRANSACTIONAL**
   - **Description**: This strategy is used when the entity requires **strict synchronization** with the database in terms of read and write operations. The cache ensures that the database and cache are always in sync within a transaction.
   - **Use Case**: Suitable for scenarios where **strong consistency** is required during a transaction.
   - **Example**: A bank transaction where consistency between the cache and database is essential.
   
   ```java
   @Entity
   @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)
   public class BankAccount {
       @Id
       @GeneratedValue(strategy = GenerationType.IDENTITY)
       private Long id;
       private Double balance;
       // getters and setters
   }
   ```

---

### **Cache Eviction and Expiration**

Caching solutions typically allow you to define **expiration** and **eviction** strategies to ensure that data doesn't become stale over time.

- **Eviction**: Determines when data is removed from the cache (e.g., when it is no longer needed).
- **Expiration**: Defines the time-to-live (TTL) for the cache. After the TTL, cached data is considered stale and removed from the cache.

For example, with **EhCache**:
```xml
<ehcache>
   <cache name="employeeCache" 
          maxEntriesLocalHeap="1000" 
          timeToLiveSeconds="600" 
          timeToIdleSeconds="300">
   </cache>
</ehcache>
```
This configuration will keep the entity in the cache for **10 minutes (600 seconds)**. After this time, the entity will be evicted, and a database hit will occur for the next request.

---

### **Real-Life Example**

Let's consider a **library system** with entities like `Book`, `Author`, and `LibraryMember`.

1. **Book Entity**:
   - The `Book` entity is frequently accessed and updated (borrowed/returned), so it's suitable for **READ_WRITE** cache strategy.

   ```java
   @Entity
   @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
   public class Book {
       @Id
       @GeneratedValue(strategy = GenerationType.IDENTITY)
       private Long id;
       private String title;
       private boolean isAvailable;
       // getters and setters
   }
   ```

2. **Author Entity**:
   - The `Author` entity is **not frequently updated**, so it's suitable for **READ_ONLY** cache strategy.

   ```java
   @Entity
   @Cache(usage = CacheConcurrencyStrategy.READ_ONLY)
   public class Author {
       @Id
       @GeneratedValue(strategy = GenerationType.IDENTITY)
       private Long id;
       private String name;
       private String biography;
       // getters and setters
   }
   ```

3. **LibraryMember Entity**:
   - The `LibraryMember` entity is likely to change (e.g., personal info, membership status), so we can use the **NONSTRICT_READ_WRITE** cache strategy for better performance without strict consistency.

   ```java
   @Entity
   @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
   public class LibraryMember {
       @Id
       @GeneratedValue(strategy = GenerationType.IDENTITY)
       private Long id;
       private String name;
       private String membershipStatus;
       // getters and setters
   }
   ```

### **Summary of Level 2 Cache in JPA**

| Feature                 | Level 2 Cache                           |
|-------------------------|-----------------------------------------|
| **Scope**               | Shared across sessions and transactions |
| **Cache Types**         | Entity Cache, Collection Cache          |
| **Concurrency Strategies** | READ_ONLY, READ_WRITE, NONSTRICT_READ_WRITE, TRANSACTIONAL |
| **Cache Providers**     | EhCache, Infinispan, Redis, Hazelcast   |
| **Eviction & Expiration** | Configurable based on TTL, size limits, etc. |
| **Cache Usage**         | Reduces database hits for frequently accessed entities |

---

### **Conclusion:**

Level 2 Cache in JPA is a powerful mechanism for improving application performance by reducing redundant database queries across multiple transactions. It allows for fine-grained control over caching behavior through **concurrency strategies**, **cache eviction**, and **expiration** policies. Properly configuring and using Level 2 Cache can significantly reduce latency and improve scalability, especially in read-heavy applications.