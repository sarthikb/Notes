In Spring Boot, an **entity** is a fundamental building block that represents a table in a relational database. It’s a Java class annotated with JPA (Java Persistence API) annotations that define how the class maps to a database table and its fields to the table columns. Understanding entities is crucial for working with databases in Spring Boot applications.

### Key Concepts of Entities

1. **Mapping to Database Tables**: Each entity corresponds to a table in the database.
2. **Fields as Columns**: The fields of the entity class represent the columns of the table.
3. **Identity**: Entities typically have a unique identifier, known as a primary key.
4. **Relationships**: Entities can define relationships with other entities, such as one-to-one, one-to-many, and many-to-many relationships.

### Common Annotations for Entities

- **@Entity**: Marks the class as a JPA entity.
- **@Table**: Specifies the table name in the database.
- **@Id**: Indicates the primary key of the entity.
- **@GeneratedValue**: Specifies the generation strategy for the primary key.
- **@Column**: Defines specific properties of a column.
- **@ManyToOne, @OneToMany, @ManyToMany**: Define relationships between entities.

### Example: Book Entity

Let’s create a simple example of a `Book` entity.

#### 1. Entity Class

```java
package com.example.demo.model;

import javax.persistence.*;

@Entity
@Table(name = "books") // Specifies the table name
public class Book {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Auto-increment primary key
    private Long id;

    @Column(nullable = false) // Not null constraint
    private String title;

    @Column(nullable = false)
    private String author;

    private Double price; // Optional field

    // Default constructor
    public Book() {}

    // Parameterized constructor
    public Book(String title, String author, Double price) {
        this.title = title;
        this.author = author;
        this.price = price;
    }

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public Double getPrice() {
        return price;
    }

    public void setPrice(Double price) {
        this.price = price;
    }
}
```

### Explanation of Annotations

1. **@Entity**: This annotation tells Spring that this class is an entity and should be mapped to a table in the database.
   
2. **@Table(name = "books")**: Specifies that this entity will map to the `books` table in the database.

3. **@Id**: Marks the `id` field as the primary key of the entity.

4. **@GeneratedValue(strategy = GenerationType.IDENTITY)**: This indicates that the primary key will be generated by the database. The `IDENTITY` strategy means the database will auto-increment the primary key.

5. **@Column(nullable = false)**: Specifies that the `title` and `author` fields cannot be null in the database.

### Relationships Example

Let’s expand the example to include a relationship. Suppose each book can belong to a publisher.

#### 2. Publisher Entity

```java
package com.example.demo.model;

import javax.persistence.*;
import java.util.List;

@Entity
@Table(name = "publishers")
public class Publisher {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String name;

    @OneToMany(mappedBy = "publisher", cascade = CascadeType.ALL)
    private List<Book> books;

    // Default constructor
    public Publisher() {}

    // Parameterized constructor
    public Publisher(String name) {
        this.name = name;
    }

    // Getters and Setters
    // ... (similar to Book)
}
```

#### 3. Modify the Book Entity for Relationship

```java
@Entity
@Table(name = "books")
public class Book {
    // Other fields...

    @ManyToOne // Many books can belong to one publisher
    @JoinColumn(name = "publisher_id") // Foreign key column in books table
    private Publisher publisher;

    // Default constructor, getters, and setters...
}
```

### Summary

- **Entities** are core to JPA and represent tables in the database.
- They are annotated with JPA annotations that define their mapping and constraints.
- Relationships between entities can be established using various annotations, allowing for complex data models.

### Best Practices

1. **Use Constructors**: Always provide a default constructor and a parameterized constructor for easier instantiation.
2. **Encapsulation**: Keep fields private and provide public getters and setters.
3. **Use DTOs**: Consider using Data Transfer Objects (DTOs) to decouple the entity model from the API.
4. **Validation**: Implement validation logic as needed, either via annotations or programmatically.

Understanding entities in Spring Boot is essential for effectively managing data interactions in your applications.