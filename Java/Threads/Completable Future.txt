### **CompletableFuture in Java: A Detailed Explanation**

---

### ðŸ”¹ What is `CompletableFuture`?

`CompletableFuture` is part of Java's `java.util.concurrent` package introduced in Java 8. It represents a **future result of an asynchronous computation**. It provides a powerful, flexible, and non-blocking way to handle concurrency and asynchronous programming.

---

### ðŸ”¹ Why Use `CompletableFuture`?

In real-world applications, especially in **web services, APIs, and background processing**, we often need to perform operations asynchronously (like database access, calling external APIs, file I/O) without blocking the main thread.

`CompletableFuture` lets you:

* Run tasks asynchronously.
* Combine multiple asynchronous operations.
* Handle success and failure outcomes elegantly.
* Compose dependent tasks.

---

### ðŸ”¹ Real-Life Example: **Online Food Ordering System**

Imagine you're building an online food delivery app:

1. The user places an order.
2. The system should:

   * Verify payment.
   * Notify the restaurant.
   * Arrange a delivery person.
3. These tasks can be done **asynchronously**.

---

### ðŸ”¹ Basic Usage

```java
CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {
    // Simulate a task like fetching data from DB
    return "Order confirmed";
});

future.thenAccept(result -> System.out.println("Result: " + result));
```

---

### ðŸ”¹ Important Methods in `CompletableFuture`

#### âœ… **1. Running Asynchronous Tasks**

* `runAsync(Runnable)`
* `supplyAsync(Supplier<T>)`

```java
CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {
    System.out.println("Task running in background...");
});
```

#### âœ… **2. Handling Result**

* `thenApply(Function)` â€“ transforms the result
* `thenAccept(Consumer)` â€“ consumes the result
* `thenRun(Runnable)` â€“ runs after completion, no input/output

```java
CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> "Pizza");
future.thenApply(item -> item + " is being prepared")
      .thenAccept(System.out::println);
```

#### âœ… **3. Combining Futures**

* `thenCombine(CompletableFuture, BiFunction)`
* `thenAcceptBoth(CompletableFuture, BiConsumer)`
* `runAfterBoth(CompletableFuture, Runnable)`

```java
CompletableFuture<String> order = CompletableFuture.supplyAsync(() -> "Pizza");
CompletableFuture<String> drink = CompletableFuture.supplyAsync(() -> "Coke");

CompletableFuture<String> combined = order.thenCombine(drink, (o, d) -> o + " with " + d);
combined.thenAccept(System.out::println);
```

#### âœ… **4. Composing Futures (Dependent Tasks)**

* `thenCompose(Function<T, CompletableFuture<U>>)` â€“ used for sequential async tasks

```java
CompletableFuture<String> verifyPayment() {
    return CompletableFuture.supplyAsync(() -> "Payment verified");
}

CompletableFuture<String> placeOrder() {
    return verifyPayment().thenCompose(payment ->
        CompletableFuture.supplyAsync(() -> payment + ", Order placed"));
}
```

#### âœ… **5. Exception Handling**

* `exceptionally(Function<Throwable, T>)`
* `handle(BiFunction<T, Throwable, R>)`
* `whenComplete(BiConsumer<T, Throwable>)`

```java
CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {
    if (true) throw new RuntimeException("Error occurred");
    return "Success";
}).exceptionally(ex -> "Fallback: " + ex.getMessage());

future.thenAccept(System.out::println);
```

#### âœ… **6. Waiting for Multiple Futures**

* `allOf(...)` â€“ wait for all tasks to complete
* `anyOf(...)` â€“ proceed when **any one** completes

```java
CompletableFuture<String> t1 = CompletableFuture.supplyAsync(() -> "Restaurant Notified");
CompletableFuture<String> t2 = CompletableFuture.supplyAsync(() -> "Delivery Assigned");

CompletableFuture<Void> all = CompletableFuture.allOf(t1, t2);
all.thenRun(() -> System.out.println("All setup done!"));
```

---

### ðŸ”¹ Full Real-Life Example: Food Ordering Workflow

```java
public class FoodOrderApp {

    public static CompletableFuture<String> verifyPayment() {
        return CompletableFuture.supplyAsync(() -> {
            sleep(1000);
            return "Payment verified";
        });
    }

    public static CompletableFuture<String> notifyRestaurant() {
        return CompletableFuture.supplyAsync(() -> {
            sleep(800);
            return "Restaurant notified";
        });
    }

    public static CompletableFuture<String> assignDelivery() {
        return CompletableFuture.supplyAsync(() -> {
            sleep(500);
            return "Delivery person assigned";
        });
    }

    public static void main(String[] args) {
        CompletableFuture<String> paymentFuture = verifyPayment();
        CompletableFuture<String> restaurantFuture = notifyRestaurant();
        CompletableFuture<String> deliveryFuture = assignDelivery();

        CompletableFuture<Void> orderWorkflow = CompletableFuture
                .allOf(paymentFuture, restaurantFuture, deliveryFuture)
                .thenRun(() -> System.out.println("Order Processing Completed!"));

        orderWorkflow.join();  // Wait for completion
    }

    private static void sleep(long millis) {
        try { Thread.sleep(millis); } catch (InterruptedException e) { e.printStackTrace(); }
    }
}
```

---

### ðŸ”¹ Summary Table of Key Methods

| Method          | Description                                     |
| --------------- | ----------------------------------------------- |
| `supplyAsync`   | Run a Supplier asynchronously                   |
| `runAsync`      | Run a Runnable asynchronously                   |
| `thenApply`     | Transform the result                            |
| `thenAccept`    | Consume the result                              |
| `thenRun`       | Action after completion, no input/output        |
| `thenCombine`   | Combine two futures                             |
| `thenCompose`   | Chain futures where the second depends on first |
| `exceptionally` | Handle exceptions and return fallback           |
| `handle`        | Handle result and exception                     |
| `whenComplete`  | Action after result, with access to exception   |
| `allOf`         | Wait for all futures                            |
| `anyOf`         | Wait for any one to complete                    |

---

### ðŸ”¹ Use Cases in Real-World Projects

* **Web API requests** (parallel calls)
* **File processing**
* **Database queries**
* **Notification services**
* **Machine learning pipeline steps**
* **Batch processing systems**

---

If you want, I can help you create a Spring Boot microservice using `CompletableFuture` or a more domain-specific example. Let me know!
