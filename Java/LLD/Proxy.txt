### **Proxy Design Pattern - Detailed Explanation with Real-Life Example**

The **Proxy Design Pattern** is a **structural pattern** that provides an object representing another object. The proxy object acts as a placeholder or surrogate for the real object and controls access to it. This pattern is commonly used to add an additional layer of functionality, such as **lazy initialization**, **access control**, **logging**, **security**, or **monitoring**.

There are several types of proxy patterns, including:
1. **Virtual Proxy**: Used for lazy initialization, where the real object is created only when it's needed.
2. **Remote Proxy**: Used to represent an object that is in a different address space (e.g., in another process or machine).
3. **Protective Proxy**: Controls access to an object based on certain conditions, often used for security purposes.
4. **Cache Proxy**: Caches the result of a computation to avoid repeated calculations.

### **Real-Life Example of Proxy Pattern**

#### Example: **Image Loading**
Imagine an **image viewer application** that needs to load images from disk or a remote server. Some images may be large, and you don't want to load them unless necessary. 

Here, the **Proxy Pattern** can be used:
- **Real Image Object**: The actual image that you want to load and display.
- **Proxy Image Object**: A proxy that delays the loading of the image (i.e., **virtual proxy**) until it's needed. It may also perform additional tasks like logging access, checking permissions, or caching the loaded image.

This pattern helps in optimizing the application's performance by loading images only when they are required, instead of loading all images upfront.

---

### **Flyweight Pattern Structure:**

The **Proxy Pattern** consists of:
1. **Subject**: This defines the common interface for the Real Object and the Proxy.
2. **RealSubject**: This is the actual object that performs the real operation. It is the object that is being proxied.
3. **Proxy**: This controls access to the `RealSubject`. It can perform additional operations before or after delegating the task to the `RealSubject`.
4. **Client**: The client interacts with the `Proxy` instead of the `RealSubject`.

---

### **Java Implementation of Proxy Pattern**

Let’s implement an image viewer application using the **Proxy Pattern** where we have a **RealImage** and a **ProxyImage** for lazy loading.

#### Step 1: Subject Interface

```java
// Subject interface
public interface Image {
    void display();  // Method to display the image
}
```

#### Step 2: RealSubject (Real Image)

```java
// RealSubject class
public class RealImage implements Image {
    private String filename;

    public RealImage(String filename) {
        this.filename = filename;
        loadImageFromDisk();
    }

    private void loadImageFromDisk() {
        System.out.println("Loading image: " + filename);
    }

    @Override
    public void display() {
        System.out.println("Displaying image: " + filename);
    }
}
```

In the `RealImage` class:
- It simulates loading an image from disk when it is created (in the `loadImageFromDisk()` method).
- It has the `display()` method that shows the image.

#### Step 3: Proxy (ProxyImage)

```java
// Proxy class
public class ProxyImage implements Image {
    private RealImage realImage;
    private String filename;

    public ProxyImage(String filename) {
        this.filename = filename;
    }

    @Override
    public void display() {
        // Lazy loading: Only load the real image when it's needed
        if (realImage == null) {
            realImage = new RealImage(filename); // Load the image from disk only when needed
        }
        realImage.display(); // Delegate to the real image to display
    }
}
```

In the `ProxyImage` class:
- It holds a reference to the `RealImage` object.
- The `display()` method checks if the `RealImage` object has been created yet. If not, it creates the `RealImage` and loads it from disk. Then it delegates the `display()` method to the real image object.

#### Step 4: Client Code

```java
public class ProxyPatternExample {
    public static void main(String[] args) {
        Image image1 = new ProxyImage("image1.jpg");
        Image image2 = new ProxyImage("image2.jpg");

        // The first time the image is displayed, it will be loaded from disk
        image1.display();
        
        // The second time the same image is displayed, it will not be loaded again
        image1.display();

        // Displaying another image
        image2.display();
    }
}
```

#### **Output:**
```
Loading image: image1.jpg
Displaying image: image1.jpg
Displaying image: image1.jpg
Loading image: image2.jpg
Displaying image: image2.jpg
```

#### **Explanation of the Code:**

1. **Image Interface**: Both `RealImage` and `ProxyImage` implement the `Image` interface, which declares the `display()` method. This ensures that both the real image and the proxy can be used interchangeably.
  
2. **RealImage**: The `RealImage` class is the actual object that loads and displays the image. The image is loaded from disk when the `RealImage` object is created, which could be expensive if many images are loaded unnecessarily. This class is responsible for the real operation.

3. **ProxyImage**: The `ProxyImage` is the proxy that controls access to the `RealImage`. It does not load the image until the `display()` method is called. It simulates lazy loading and delegates the task to the `RealImage` once it's actually needed. It can also perform additional operations (such as access control or logging) before delegating to the `RealImage`.

4. **Client**: The client interacts with the `ProxyImage` instead of directly accessing the `RealImage`. The proxy pattern allows the client to access the image without needing to worry about whether the image has already been loaded or not.

---

### **Benefits of Proxy Pattern:**

1. **Lazy Initialization**: The proxy can delay the creation of the real object until it is absolutely needed. In our case, the image is loaded only when the `display()` method is called, reducing unnecessary processing time and memory usage.
  
2. **Access Control**: Proxies can control access to the real object by adding security checks or other access restrictions. For example, you could create a `ProtectiveProxy` to prevent unauthorized access to a sensitive resource.
  
3. **Performance Optimization**: Proxies can be used to optimize performance, such as caching results of expensive computations, preventing repetitive work.

4. **Remote Proxy**: In distributed systems, you can use a remote proxy to represent an object that is located on a different machine, and the proxy handles the communication between the client and the remote object.

5. **Monitoring and Logging**: A proxy can perform additional functionality like logging, monitoring, or auditing when an object is accessed.

---

### **When to Use Proxy Pattern:**

1. **When an object is resource-intensive**: If creating an object is expensive or involves a long setup time, you might want to delay the creation or only create it when needed (virtual proxy).
  
2. **Access Control**: When you need to control access to an object based on certain conditions (like security restrictions), you can use a **protective proxy**.

3. **Distributed Systems**: In cases where objects are distributed across different machines (remote proxy), the proxy pattern can abstract the complexity of remote communication.

4. **Caching**: When you need to cache expensive operations or results of computations (cache proxy), so they don’t have to be recalculated or fetched again.

---

### **Summary:**
The **Proxy Design Pattern** is used to provide a surrogate object that controls access to another object, usually to add additional behavior like lazy initialization, logging, or access control. In our image viewer example, the **ProxyImage** class acts as a proxy for the **RealImage** class. The proxy delays the loading of the real image until it's actually needed and then delegates the task to the real object. This pattern improves performance and provides greater flexibility in controlling object creation and access.

Let me know if you need further clarification or examples!