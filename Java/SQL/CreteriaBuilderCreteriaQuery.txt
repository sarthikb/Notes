The CriteriaBuilder and CriteriaQuery are part of the Java Persistence API (JPA) and provide a way to create database queries dynamically at runtime using a type-safe, object-oriented approach.  This contrasts with using JPQL (Java Persistence Query Language) which relies on string-based queries, making them more prone to errors and less maintainable.
Here's a breakdown of their uses:
CriteriaBuilder:


Factory for Query Elements:  The CriteriaBuilder acts as a factory. It's used to create all the building blocks needed to construct a CriteriaQuery.  These building blocks include:

Predicates: Represent conditions in the WHERE clause (e.g., equal, greaterThan, like, between, etc.).  You combine predicates using logical operators (and, or, not).
Expressions: Represent values, attributes (paths to fields in your entities), and functions in the query (e.g., sum, avg, count, etc.).
Path Expressions:  These specifically represent the navigation through relationships in your entities (e.g., accessing a field in an associated entity).
Selection Items: Specify what columns or properties to retrieve in the SELECT clause.
Order Items: Define the sorting order (ASC or DESC) in the ORDER BY clause.
Join Expressions: Create joins between entities.



Type Safety: The CriteriaBuilder ensures type safety.  You're working with Java objects and methods, not strings, so the compiler can catch many errors before runtime.


Dynamic Query Construction:  Because you build the query programmatically, you can adapt it based on runtime conditions.  This is particularly useful when you need to create queries based on user input or other dynamic factors.


CriteriaQuery:


Represents the Query: The CriteriaQuery object represents the entire database query.  It's built using the elements created by the CriteriaBuilder.


Defining Query Elements: You use methods of the CriteriaQuery to add elements to the query:

from(EntityClass): Specifies the root entity for the query.
select(SelectionItem): Defines what to retrieve (SELECT clause).
where(Predicate): Adds conditions to the query (WHERE clause).
orderBy(OrderItem): Specifies the sorting order (ORDER BY clause).
groupBy(Expression): Groups results (GROUP BY clause).
having(Predicate): Adds conditions to grouped results (HAVING clause).



Result Type: When you create a CriteriaQuery, you specify the type of object it will return.  This ensures that the results are correctly mapped to Java objects.


Execution: Once you've built the CriteriaQuery, you use the EntityManager's createQuery() method to create a TypedQuery (or Query).  Then, you can execute the query using methods like getResultList() or getSingleResult().


Example (Illustrative):
1CriteriaBuilder cb = entityManager.getCriteriaBuilder();
2CriteriaQuery<Employee> cq = cb.createQuery(Employee.class);
3Root<Employee> employee = cq.from(Employee.class);
4
5// Add a WHERE clause condition
6Predicate salaryPredicate = cb.greaterThan(employee.get("salary"), 50000);
7cq.where(salaryPredicate);
8
9// Add an ORDER BY clause
10cq.orderBy(cb.asc(employee.get("name")));
11
12// Select all employee attributes
13cq.select(employee);
14
15TypedQuery<Employee> query = entityManager.createQuery(cq);
16List<Employee> employees = query.getResultList();
In this example:

CriteriaBuilder creates the greaterThan predicate and asc order item.
CriteriaQuery defines the root entity (Employee), the WHERE clause, the ORDER BY clause, and what to select.
EntityManager executes the query.

In short, CriteriaBuilder provides the tools, and CriteriaQuery is the container that holds the query built using those tools.  Together, they offer a flexible and type-safe alternative to JPQL for creating dynamic database queries in JPA.