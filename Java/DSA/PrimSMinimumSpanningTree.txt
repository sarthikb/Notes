
---

## 🌳 What is a Minimum Spanning Tree (MST)?

* Given a **connected**, **undirected**, and **weighted** graph, an **MST** is a subset of the edges that:

  * Connects all the vertices together (spanning)
  * Has **no cycles**
  * Has the **minimum possible total edge weight**

---

## 🧠 Prim’s Algorithm: Key Idea

Prim’s algorithm grows the MST **one vertex at a time**, starting from any vertex.
At each step, it **chooses the smallest-weight edge** that connects a vertex in the MST to a vertex **not yet in the MST**.

---

### ✅ Algorithm Steps:

1. Start from any vertex (e.g., vertex 0).
2. Maintain a **Min Heap (Priority Queue)** of adjacent edges.
3. Keep a **visited\[]** array to track included vertices.
4. At each step:

   * Pick the **smallest weight edge** connecting to a new vertex.
   * Add that vertex to the MST.
   * Add its outgoing edges to the heap (if they connect to unvisited vertices).
5. Repeat until all vertices are included in the MST.

---

## 🖼️ Example Graph

Let's assume the graph has 5 vertices and these edges:

```
Edge List:
0 - 1 (2)
0 - 3 (6)
1 - 2 (3)
1 - 3 (8)
1 - 4 (5)
2 - 4 (7)
3 - 4 (9)
```

---

## 📦 Java Code – Prim’s Algorithm (Using PriorityQueue)

```java
import java.util.*;

class Edge implements Comparable<Edge> {
    int vertex;
    int weight;

    Edge(int v, int w) {
        this.vertex = v;
        this.weight = w;
    }

    public int compareTo(Edge other) {
        return this.weight - other.weight;
    }
}

public class PrimsMST {
    static int V = 5; // number of vertices

    public static void primsAlgo(List<List<Edge>> graph, int start) {
        boolean[] visited = new boolean[V];
        PriorityQueue<Edge> pq = new PriorityQueue<>();

        // Start from the initial node
        pq.add(new Edge(start, 0));
        int totalCost = 0;

        while (!pq.isEmpty()) {
            Edge current = pq.poll();

            if (visited[current.vertex]) continue;

            visited[current.vertex] = true;
            totalCost += current.weight;

            System.out.println("Include vertex: " + current.vertex + " with edge weight: " + current.weight);

            // Add all adjacent edges to the queue
            for (Edge neighbor : graph.get(current.vertex)) {
                if (!visited[neighbor.vertex]) {
                    pq.add(neighbor);
                }
            }
        }

        System.out.println("Total cost of MST: " + totalCost);
    }

    public static void main(String[] args) {
        List<List<Edge>> graph = new ArrayList<>();

        for (int i = 0; i < V; i++) {
            graph.add(new ArrayList<>());
        }

        // Adding edges (undirected)
        graph.get(0).add(new Edge(1, 2));
        graph.get(1).add(new Edge(0, 2));

        graph.get(0).add(new Edge(3, 6));
        graph.get(3).add(new Edge(0, 6));

        graph.get(1).add(new Edge(2, 3));
        graph.get(2).add(new Edge(1, 3));

        graph.get(1).add(new Edge(3, 8));
        graph.get(3).add(new Edge(1, 8));

        graph.get(1).add(new Edge(4, 5));
        graph.get(4).add(new Edge(1, 5));

        graph.get(2).add(new Edge(4, 7));
        graph.get(4).add(new Edge(2, 7));

        graph.get(3).add(new Edge(4, 9));
        graph.get(4).add(new Edge(3, 9));

        primsAlgo(graph, 0); // Start Prim's from vertex 0
    }
}
```

---

## 🧾 Output

```
Include vertex: 0 with edge weight: 0
Include vertex: 1 with edge weight: 2
Include vertex: 2 with edge weight: 3
Include vertex: 4 with edge weight: 5
Include vertex: 3 with edge weight: 6
Total cost of MST: 16
```

---

## 🔍 How It Works

1. Start from vertex 0 → include in MST.
2. Among its edges (0–1, 0–3), choose 0–1 (weight = 2).
3. Add vertex 1 to MST → now MST includes 0, 1.
4. Consider new edges from 1: (1–2 = 3), (1–3 = 8), (1–4 = 5).
5. Choose edge with smallest weight to new vertex → 1–2 (weight = 3).
6. Continue until all vertices are added.

---

## 📝 Summary

* **Prim's** is efficient with **PriorityQueue**: `O(E log V)`
* Great for **dense graphs**.
* Can be implemented with arrays or heaps (heap = faster).

---

