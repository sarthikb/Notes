import java.util.*;

public class DijkstraShortestPath {

    static class Edge {
        int to, weight;

        Edge(int to, int weight) {
            this.to = to;
            this.weight = weight;
        }
    }

    static class Graph {
        int V;
        List<List<Edge>> adj;

        Graph(int V) {
            this.V = V;
            adj = new ArrayList<>();
            for (int i = 0; i < V; i++) {
                adj.add(new ArrayList<>());
            }
        }

        void addEdge(int u, int v, int weight) {
            adj.get(u).add(new Edge(v, weight));
            adj.get(v).add(new Edge(u, weight)); // For undirected graph
        }

        void dijkstra(int source) {
            int[] dist = new int[V];
            int[] parent = new int[V];
            Arrays.fill(dist, Integer.MAX_VALUE);
            Arrays.fill(parent, -1);
            dist[source] = 0;

            PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[1]));
            pq.add(new int[]{source, 0});

            boolean[] visited = new boolean[V];

            while (!pq.isEmpty()) {
                int[] curr = pq.poll();
                int u = curr[0];

                if (visited[u]) continue;
                visited[u] = true;

                for (Edge edge : adj.get(u)) {
                    int v = edge.to;
                    int weight = edge.weight;

                    if (!visited[v] && dist[u] + weight < dist[v]) {
                        dist[v] = dist[u] + weight;
                        parent[v] = u;
                        pq.add(new int[]{v, dist[v]});
                    }
                }
            }

            // Print distances and paths
            for (int i = 0; i < V; i++) {
                System.out.println("Shortest distance from " + source + " to " + i + " is " + dist[i]);
                printPath(parent, i);
                System.out.println();
            }
        }

        void printPath(int[] parent, int j) {
            if (parent[j] == -1) {
                System.out.print(j);
                return;
            }
            printPath(parent, parent[j]);
            System.out.print(" -> " + j);
        }
    }

    public static void main(String[] args) {
        Graph g = new Graph(6);

        // Add weighted edges (u, v, weight)
        g.addEdge(0, 1, 4);
        g.addEdge(0, 2, 2);
        g.addEdge(1, 2, 1);
        g.addEdge(1, 3, 5);
        g.addEdge(2, 3, 8);
        g.addEdge(2, 4, 10);
        g.addEdge(3, 4, 2);
        g.addEdge(3, 5, 6);
        g.addEdge(4, 5, 3);

        int source = 0;
        System.out.println("Dijkstra's shortest paths from node " + source + ":");
        g.dijkstra(source);
    }
}
