Sure! Here's how to create a **WebSocket server in Java using Spring Boot**, step-by-step.

---

## ‚úÖ Goal

We will build a **Spring Boot WebSocket server** that:

* Accepts client WebSocket connections
* Echoes back any message it receives

---

## üì¶ 1. Maven Dependencies (`pom.xml`)

Make sure you include the Spring WebSocket and Web starter dependencies:

```xml
<dependencies>
  <!-- Spring Boot Starter Web -->
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
  </dependency>

  <!-- Spring Boot Starter WebSocket -->
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-websocket</artifactId>
  </dependency>
</dependencies>
```

---

## üõ†Ô∏è 2. WebSocket Configuration

Create a config class to register the WebSocket endpoint.

```java
import org.springframework.context.annotation.Configuration;
import org.springframework.web.socket.config.annotation.EnableWebSocket;
import org.springframework.web.socket.config.annotation.WebSocketConfigurer;
import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;

@Configuration
@EnableWebSocket
public class WebSocketConfig implements WebSocketConfigurer {

    @Override
    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
        registry.addHandler(new MyWebSocketHandler(), "/ws")
                .setAllowedOrigins("*"); // Allow all origins for testing
    }
}
```

---

## üì§ 3. WebSocket Handler

This is where we handle connection events and messages.

```java
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

public class MyWebSocketHandler extends TextWebSocketHandler {

    @Override
    public void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
        String clientMessage = message.getPayload();
        System.out.println("Received: " + clientMessage);

        // Echo the message back
        session.sendMessage(new TextMessage("Server received: " + clientMessage));
    }

    @Override
    public void afterConnectionEstablished(WebSocketSession session) throws Exception {
        System.out.println("New client connected: " + session.getId());
    }

    @Override
    public void afterConnectionClosed(WebSocketSession session, org.springframework.web.socket.CloseStatus status) throws Exception {
        System.out.println("Client disconnected: " + session.getId());
    }
}
```

---

## üöÄ 4. Run the Application

You can now start your Spring Boot application (just use a `@SpringBootApplication` class).

---

## üåê 5. Connect with JavaScript Client

```html
<script>
    const socket = new WebSocket("ws://localhost:8080/ws");

    socket.onopen = () => {
        console.log("Connected to WebSocket");
        socket.send("Hello from the browser!");
    };

    socket.onmessage = (event) => {
        console.log("Message from server:", event.data);
    };

    socket.onclose = () => {
        console.log("WebSocket connection closed");
    };

    socket.onerror = (error) => {
        console.error("WebSocket error:", error);
    };
</script>
```

---

## ‚úÖ Summary

| Component            | Purpose                                             |
| -------------------- | --------------------------------------------------- |
| `WebSocketConfig`    | Registers WebSocket endpoint (`/ws`)                |
| `MyWebSocketHandler` | Handles incoming messages and sends responses       |
| JavaScript Client    | Connects to WebSocket server and exchanges messages |

---

Let me know if you want:

* Authentication support (JWT over WebSocket)
* Broadcasting to multiple clients
* WebSocket with STOMP and SockJS for frontend frameworks (React, Angular, etc.)
